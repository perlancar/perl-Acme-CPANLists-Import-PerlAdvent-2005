<html>
<head>
<title>YA Perl Advent Calendar 2005: Three french toasts</title>
<link rel="stylesheet" href="../style.css" type="text/css" /></head>
<body>
<h1><a href="../">YA Perl Advent Calendar</a> 2005-12-24</h1>
To atone for yesterday's delay, today I bring you two related modules:
<a href="http://search.cpan.org/search?module=enum">enum</a> &amp;&amp;
<a href="http://search.cpan.org/search?module=enum::hash">enum::hash</a>.
enum provides the ability to create C-style enums i.e; a simple means of
producing a series of english-named numeric
constants<sup style="font-size:small"><a href="#1">1</a></sup>. The
canonical
example is to index into the myriad return values of array context
<tt>localtime</tt>. enum::hash provides an interface styled after enum for
creating a hash; in case you don't want a slew of contants cluttering your
namespace, or wish to avoid a naming conflict. So while a <tt>$LC{year}</tt>
from enum::hash is arguably more perlish than an enum <tt>LC_Year</tt> it's
really a matter of personal preference.

<h1><a href="mod24.pl">mod24.pl</a></h1>
<hr />
<pre>
   1 <span class="k">use</span> <span class="w">enum</span> <span class="q">qw(:LC_ Sec Min Hour MDay Mon Year WDay YDay IsDST)</span><span class="sc">;</span>
   2 <span class="k">use</span> <span class="w">enum</span> <span class="q">qw(:Months_ Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec)</span><span class="sc">;</span>
   3 <span class="k">print</span> <span class="q">&quot;Happy New Year!!\n&quot;</span> <span class="k">if</span> <span class="s">(</span><span class="k">localtime</span><span class="s">)</span>[<span class="w">LC_Mon</span>] == <span class="w">Months_Jan</span> &amp;&amp;
   4   <span class="s">(</span><span class="k">localtime</span><span class="s">)</span>[<span class="w">LC_MDay</span>] == <span class="n">1</span><span class="sc">;</span>
   5 
   6 <span class="k">use</span> <span class="w">enum::hash</span> <span class="q">'enum'</span><span class="sc">;</span>
   7 <span class="i">%LC</span>    = <span class="w">enum</span> <span class="q">qw(Sec Min Hour MDay Mon Year WDay YDay Isdst)</span><span class="sc">;</span>
   8 <span class="i">%month</span> = <span class="w">enum</span> <span class="q">qw(Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec)</span><span class="sc">;</span>
   9 <span class="k">print</span> <span class="q">&quot;Happy New Year!!\n&quot;</span> <span class="k">if</span> <span class="s">(</span><span class="k">localtime</span><span class="s">)</span>[<span class="i">$LC</span>{<span class="w">Mon</span>}] == <span class="i">$month</span>{<span class="w">Jan</span>} &amp;&amp;
  10   <span class="s">(</span><span class="k">localtime</span><span class="s">)</span>[<span class="i">$LC</span>{<span class="w">MDay</span>}] == <span class="n">1</span><span class="sc">;</span>
</pre>
<p />
In the BUGS section of enum's POD the author gripes
<pre class="pd">
     No way (that I know of) to cause compile time errors when
     one of these enum names get redefined.  IMHO, there is
     absolutely no time when redefining a sub is a Good
     Thing[tm], and should be taken out of the language, or at
     least have a pragma that can cause it to be a compile time
     error.
</pre>
Well, in the intervening 6 years a lot has happened... from perldiag:
<pre class="pd">
     Constant subroutine %s redefined
         (S) You redefined a subroutine which had previously been
         eligible for inlining.  See "Constant Functions" in
         perlsub for commentary and workarounds.

</pre>
<p />
<a name="1">1</a>. Actually, they support enums to letter
values&ndash;A..Z&ndash;however
the actual utility of such is questionable.
</body></html>
