<html>
<head>
<title>YA Perl Advent Calendar 2005: Everyone loves a critic</title>
<link rel="stylesheet" href="../style.css" type="text/css" /></head>
<body>
<h1><a href="../">YA Perl Advent Calendar</a> 2005-12-19</h1>
I apologize, today's module is a little late out the door. It's also a little
light on details because well, it'd take forever and a day to test it
thoroughly. And while it might have a dozen or so dependencies&ndash;I heartily
recommend you use CPAN or CPANPLUS&ndash;you probably either have a lot of them
already or will need them in the future including: Storable, Test::More, and
Scalar-List-Util. The module in question is <a href="http://search.cpan.org/search?module=Test::Perl::Critic">Test::Perl::Critic</a>.
<p>
If you're (un)lucky enough to have a a sadistic project manager who insists on
strict coding practices, or you're just a masochist^uMr. Conway recently wrote
a little book you may have heard of about writing cleaner line-noise. About the
same time two other guys released a book about testing your code for everything
up to and including halting. Now you too can say "Hey! You got your trout in my
peanut butter!" Yes indeed, you can now automate checking your compliance with
established best practices. Test::Perl::Critic lets you add a set of tests for
various things from the innocuous ProhibitBuiltinHomonyms (no subs with the
same name as CORE functions) to the obnoxious ProhibitUnlessBlocks. Of course
it's infinitely configurable, extensible yadda yadda yadda. And yes, the
author does in a bout of circular dependency, eat his hown dog food; the engine
Perl::Critic contains and passes a Test::Perl::Critic test.
<p>
Just for fun, here's the output with the default policies against a very
simple and very incomplete module I started last Thanksgiving. A link to the
code follows. . o O ( I wonder if "Jeffrey Ryan Thalhammer" is a pseudonym for
"Damian Conway", he sure pimps the book like an author ;-)
<pre class="c">
not ok 1 - blib/lib/Acme/English.pm
#     Failed test (/usr/lib/perl5/site_perl/5.8.0/Test/Perl/Critic.pm at line 83)
# 
# Perl::Critic found these violations in 'blib/lib/Acme/English.pm':
#       Code before warnings are enabled at line 6, column 1. See page 431 of PBP
#       Package variable declared or used at line 4, column 1. See pages 73,75 of PBP
#       List declaration without trailing comma at line 32, column 12. See page 17 of PBP
#       Quotes used with a noisy string at line 12, column 5. See page 53 of PBP
#       Quotes used with a noisy string at line 13, column 5. See page 53 of PBP
#       Quotes used with a noisy string at line 14, column 5. See page 53 of PBP
#       Useless interpolation of literal string at line 14, column 5. See page 51 of PBP
#       Quotes used with a noisy string at line 15, column 5. See page 53 of PBP
#       Quotes used with a noisy string at line 16, column 5. See page 53 of PBP
#       String *may* require interpolation at line 16, column 5. See page 51 of PBP
#       Quotes used with a noisy string at line 17, column 5. See page 53 of PBP
#       Quotes used with a noisy string at line 18, column 5. See page 53 of PBP
#       Quotes used with a noisy string at line 19, column 5. See page 53 of PBP
#       String *may* require interpolation at line 19, column 5. See page 51 of PBP
#       Quotes used with a noisy string at line 20, column 5. See page 53 of PBP
#       Quotes used with a noisy string at line 22, column 5. See page 53 of PBP
#       Quotes used with a noisy string at line 23, column 5. See page 53 of PBP
#       Quotes used with a noisy string at line 26, column 5. See page 53 of PBP
#       Quotes used with a noisy string at line 27, column 5. See page 53 of PBP
#       Quotes used with a noisy string at line 28, column 5. See page 53 of PBP
#       Useless interpolation of literal string at line 28, column 5. See page 51 of PBP
#       Quotes used with a noisy string at line 31, column 5. See page 53 of PBP
#       Quotes used with a noisy string at line 32, column 5. See page 53 of PBP
#       Builtin function called with parens at line 35, column 10. See page 13 of PBP
#       Builtin function called with parens at line 37, column 10. See page 13 of PBP
#       Quotes used with an empty string at line 37, column 16. See page 53 of PBP
#       Builtin function called with parens at line 38, column 11. See page 13 of PBP
#       Useless interpolation of literal string at line 38, column 45. See page 51 of PBP
#       Quotes used with an empty string at line 38, column 45. See page 53 of PBP
# Looks like you failed 1 tests of 1.
make: *** [test_dynamic] Error 1
</pre>
<h1><a href="mod19.pl">mod19.pl</a></h1>
<hr />
<span style="display: block; width: 80%; margin:auto">
<ul>

	<li><a href="#name">NAME</a></li>
	<li><a href="#synopsis">SYNOPSIS</a></li>
	<li><a href="#description">DESCRIPTION</a></li>
	<li><a href="#bugs">BUGS</a></li>
	<li><a href="#author">AUTHOR</a></li>
	<li><a href="#see_also">SEE ALSO</a></li>
</ul>
<hr />
<p></p>
<hr />
<h1><a name="name">NAME</a></h1>
<p>Acme::English - remove unsightly punctuation</p>
<p>
</p>
<hr />
<h1><a name="synopsis">SYNOPSIS</a></h1>
<pre>
  use Acme::English;</pre>
<p>
</p>
<hr />
<h1><a name="description">DESCRIPTION</a></h1>
<p>Inspired by this lovely poem:</p>
<pre>
  A poem:
  &lt;&gt;!*''#              waka waka bang splat tick tick hash
  ^@`$$-               carat at back-tick dollar dollar dash
  *!'$_                splat bang tick dollar underscore
  %*&lt;&gt;#4               percent splat waka waka number four
  &amp;)../                ampersand right-paren dot dot slash
  {~|**SYSTEM HALTED   curly bracket tilde pipe splat splat crash</pre>
<p>by Fred Bremmer and Steve Kroese</p>
<p>:pretentious Octothorpe</p>
<p>:jargon star hat bar twiddle</p>
<p>
</p>
<hr />
<h1><a name="bugs">BUGS</a></h1>
<p>I cheated in the default definitions of some of the characters.
Waka = &lt; and Wakka = &gt; (more k's, get it? ;-) CurLyBracket
(I call them CurlyBraces) is the { and CuRlyBracket is }.</p>
<p>
</p>
<hr />
<h1><a name="author">AUTHOR</a></h1>
<p>Jerrad Pierce &lt;<a href="mailto:jpierce@cpan">jpierce@cpan</a>&gt;</p>
<p>
</p>
<hr />
<h1><a name="see_also">SEE ALSO</a></h1>
<p>Acme::English, the ASCII jargon entry</p>

<hr /><pre><a name="package-Acme::English-"></a>   1 <span class="k">package </span><span class="i">Acme::English</span><span class="sc">;</span>
   2 
   3 <span class="k">use</span> <span class="w">strict</span><span class="sc">;</span>
   4 <span class="k">use</span> <span class="w">vars</span> <span class="q">qw($VERSION)</span><span class="sc">;</span>
   5 
   6 <span class="i">$VERSION</span> = <span class="q">'1.00'</span><span class="sc">;</span>
   7 
   8 <span class="c">#Sesquipedalian / oglethorpe</span>
   9 <span class="k">my</span> <span class="i">%chr</span> = <span class="s">(</span>
  10 	   <span class="q">'&lt;'</span> <span class="cm">=&gt;</span> <span class="q">'Waka'</span><span class="cm">,</span>
  11 	   <span class="q">'&gt;'</span> <span class="cm">=&gt;</span> <span class="q">'Wakka'</span><span class="cm">,</span>
  12 	   <span class="q">'!'</span> <span class="cm">=&gt;</span> <span class="q">'Bang'</span><span class="cm">,</span>
  13 	   <span class="q">'*'</span> <span class="cm">=&gt;</span> <span class="q">'Splat'</span><span class="cm">,</span>
  14 	   <span class="q">&quot;'&quot;</span> <span class="cm">=&gt;</span> <span class="q">'Tick'</span><span class="cm">,</span>
  15 	   <span class="q">'^'</span> <span class="cm">=&gt;</span> <span class="q">'Carat'</span><span class="cm">,</span>
  16 	   <span class="q">'@'</span> <span class="cm">=&gt;</span> <span class="q">'At'</span><span class="cm">,</span>
  17 	   <span class="q">'`'</span> <span class="cm">=&gt;</span> <span class="q">'BackTick'</span><span class="cm">,</span>
  18 	   <span class="q">'#'</span> <span class="cm">=&gt;</span> <span class="q">'Hash'</span><span class="cm">,</span> <span class="c">#XXX Number!</span>
  19 	   <span class="q">'$'</span> <span class="cm">=&gt;</span> <span class="q">'Dollar'</span><span class="cm">,</span>
  20 	   <span class="q">'-'</span> <span class="cm">=&gt;</span> <span class="q">'Dash'</span><span class="cm">,</span>
  21 	   <span class="q">'_'</span> <span class="cm">=&gt;</span> <span class="q">'Underscore'</span><span class="cm">,</span>
  22 	   <span class="q">'%'</span> <span class="cm">=&gt;</span> <span class="q">'Percent'</span><span class="cm">,</span>
  23 	   <span class="q">'&amp;'</span> <span class="cm">=&gt;</span> <span class="q">'Ampersand'</span><span class="cm">,</span>
  24 	   <span class="q">')'</span> <span class="cm">=&gt;</span> <span class="q">'RightParen'</span><span class="cm">,</span>
  25 	   <span class="q">'('</span> <span class="cm">=&gt;</span> <span class="q">'LeftParen'</span><span class="cm">,</span>
  26 	   <span class="q">'.'</span> <span class="cm">=&gt;</span> <span class="q">'Dot'</span><span class="cm">,</span>
  27 	   <span class="q">'/'</span> <span class="cm">=&gt;</span> <span class="q">'Slash'</span><span class="cm">,</span>
  28 	   <span class="q">&quot;\\&quot;</span><span class="cm">=&gt;</span> <span class="q">'BackSlash'</span><span class="cm">,</span>
  29 	   <span class="q">'{'</span> <span class="cm">=&gt;</span> <span class="q">'CurLyBracket'</span><span class="cm">,</span> <span class="c">#Right?!! Brace?!</span>
  30 	   <span class="q">'}'</span> <span class="cm">=&gt;</span> <span class="q">'CuRlyBracket'</span><span class="cm">,</span> <span class="c">#Right?!! Brace?!</span>
  31 	   <span class="q">'~'</span> <span class="cm">=&gt;</span> <span class="q">'Tilde'</span><span class="cm">,</span>
  32 	   <span class="q">'|'</span> <span class="cm">=&gt;</span> <span class="q">'Pipe'</span>
  33 <span class="s">)</span><span class="sc">;</span>
  34 <span class="c">#print &lt;DATA&gt;;</span>
  35 <span class="k">my</span> <span class="i">$in</span> = <span class="k">join</span><span class="s">(</span><span class="q">&quot;\n&quot;</span><span class="cm">,</span> <span class="s">(</span><span class="q">&lt;DATA&gt;</span><span class="s">)</span><span class="s">)</span><span class="sc">;</span>
  36 
  37 <span class="k">foreach</span> <span class="s">(</span><span class="k">split</span><span class="s">(</span><span class="q">''</span><span class="cm">,</span> <span class="i">$in</span><span class="s">)</span> <span class="s">)</span><span class="s">{</span>
  38     <span class="k">print</span> <span class="k">exists</span><span class="s">(</span><span class="i">$chr</span>{<span class="i">$_</span>}<span class="s">)</span> ? <span class="i">$chr</span>{<span class="i">$_</span>} <span class="co">:</span> <span class="i">$_</span><span class="cm">,</span> <span class="q">&quot; &quot;</span><span class="sc">;</span>
  39 <span class="s">}</span>
  40 
  41 <span class="c"># Preloaded methods go here.</span>
  42 
  43 <span class="c"># Autoload methods go after =cut, and are processed by the autosplit program.</span>
  44 
  45 <span class="n">1</span><span class="sc">;</span>
<a name="__DATA__-"></a>  46 <span class="k">__DATA__</span>
  47 
  48 <span class="q">__END__</span>
  49 <span class="q"># Below is the stub of documentation for your module. You better edit it!</span>
  50 
</pre>
</span>
</body></html>
