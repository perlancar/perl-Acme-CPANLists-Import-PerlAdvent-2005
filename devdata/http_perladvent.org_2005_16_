<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!--last modified on Wednesday, December 14, 2005 11:52 PM -->
<HTML>
<HEAD>
	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
	<!-- link rel="alternate" type="application/rss+xml" title="RSS" href="../yapac-rss.xml" -->
	<META NAME="Author" Content="Bill Ricker, n1vux">
	<TITLE>YA Perl Advent Calendar 2005: On the 16th day of Advent my True Language syndicated for me... </TITLE>
	<LINK REL="stylesheet" TYPE="text/css" HREF="../style.css">
</HEAD>

<BODY>

<H1><A HREF="../">YA Perl Advent Calendar</A> 2005-12-16</H1>


<blockquote style="padding: 1em; border: 2px ridge black; background-color:#eee">
<a href="http://use.perl.org/comments.pl?sid=29706&cid=45008">Somebody asked
for an RSS feed</a> because they love the Advent calendar so much, yet being
a perl hacker they also exhibited the virtue of Laziness and didn't feel like
checking every 20 minutes to see if I'd released the day's writeup yet.
Besides, Mark used to have one. I, on the other hand, did not feel it was
worthwhile for such an ephemeral urgency; paricularly since there was no
question as to whether there was to be an update rather only when.
<p>
On the other hand our previous guest author, William 'N1VUX' Ricker, was
interested in learning a little about RSS and felt it a worthy endeavor.
We thereore proudly you present with an
<B><A HREF="../yapac-rss.xml">RSS feed <img src="../feed15.gif" height=15 width=15 border=0></A></B>
Enjoy!
<p/>
P.S. If you're at a loss for uses/relevance of RSS you might try something like
<a href="http://pthbb.org/cgi-bin/comics.cgi">this</a>, creating a feed for
your favorite comics.
</blockquote>


<P>Adding RSS to the Calendar isn't as bad as I thought &mdash; there's a &quot;Simple&quot; module, from Sean Burke
of course - <A HREF="http://search.cpan.org/search?module=XML::RSS::SimpleGen">XML::RSS::SimpleGen</A>.

<!--
It's easy to install</P>
<PRE> wget http://search.cpan.org/CPAN/authors/id/S/SB/SBURKE/XML-RSS-SimpleGen-11.11.tar.gz
 uncompress XML-*.tar.gz
 tar vxf  XML-RSS-SimpleGen-11.11.tar
 cd XML-RSS-SimpleGen-11.11
 perl Makefile.PL
 make
 make test
 cd ..
 # paste POD in to modXRS.pl and edit to repurpose ...
 perl -I XML-RSS-SimpleGen-11.11/lib modXRS.pl</PRE>
-->

<P>After the usual painless install and a little cargo-cult hacking of the POD example we're already half done ..</P>
<PRE>$ cat yapac.rss # first version
<span class="c">&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;?xml-stylesheet title=&quot;CSS_formatting&quot; type=&quot;text/css&quot; 
    href=&quot;http://www.interglacial.com/rss/rss.css&quot;?&gt;
&lt;rss version=&quot;2.0&quot;  xmlns:sy=&quot;http://purl.org/rss/1.0/modules/syndication/&quot;&gt;
&lt;channel&gt;
&lt;!-- Generated with Perl's XML::RSS::SimpleGen v11.11 --&gt;
&lt;link&gt;http://web.mit.edu/belg4mit/www/&lt;/link&gt;
&lt;title&gt;YAPAC&lt;/title&gt;
&lt;description&gt;Yet Another Perl (Advent) Calendar&lt;/description&gt;
&lt;language&gt;en&lt;/language&gt;
&lt;lastBuildDate&gt;Thu, 15 Dec 2005 02:31:27 GMT&lt;/lastBuildDate&gt;
&lt;skipHours&gt;&lt;hour&gt;0&lt;/hour&gt;&lt;hour&gt;1&lt;/hour&gt;&lt;hour&gt;3&lt;/hour&gt;<B><FONT COLOR="red">...</FONT></B>&lt;hour&gt;23&lt;/hour&gt;&lt;/skipHours&gt;
&lt;sy:updateFrequency&gt;1&lt;/sy:updateFrequency&gt;
&lt;sy:updatePeriod&gt;daily&lt;/sy:updatePeriod&gt;
&lt;sy:updateBase&gt;1970-01-01T02:40+00:00&lt;/sy:updateBase&gt;
&lt;ttl&gt;1440&lt;/ttl&gt;
&lt;webMaster&gt;jpierce@cpan.org&lt;/webMaster&gt;
&lt;docs&gt;http://www.interglacial.com/rss/about.html&lt;/docs&gt;

&lt;item&gt;  
	&lt;title&gt;1..5&lt;/title&gt; 
	&lt;link&gt;http://web.mit.edu/belg4mit/www/5/&lt;/link&gt;
	&lt;description&gt;On day 5/, my true language gave to me&lt;/description&gt;
&lt;/item&gt;

&lt;item&gt;  
	&lt;title&gt;6&lt;/title&gt;  
	&lt;link&gt;http://web.mit.edu/belg4mit/www/6/&lt;/link&gt;  
	&lt;description&gt;On day 6/, my true language gave to me&lt;/description&gt;
&lt;/item&gt;
<B><FONT COLOR="red">etc...
</FONT></B>&lt;/channel&gt;&lt;/rss&gt;</span></PRE>

<P>Since the main page doesn't have descriptions or titles, there's a slight problem with using the POD's main-page
scrape generating descriptions. So we either have to fill in a default as above, or fetch the page (or the Header
of the page) to grab <TT>&lt;title&gt;</TT> to fill in the <TT>&lt;description&gt;</TT>. However, that was already
discussed on <A HREF="../5/">Catchup Day 1..5</A>, so it shouldn't be too hard. </P>

<P>So what's left to do after the quick hack?
<H2>TODO after first 20 minutes ...</H2>

<oL>
	<LI>Scrape day pages to get titles to replace main-page scrape of $3 for description.</li>
	<LI>What about this <B>rss_history_file</B> thing?</li>
	<LI>Hook the (MIT) favicon as RSS image?</li>
	<LI>Figure out how to make it appear in FireFox for subscribing</li>
	<LI>Test</li>
	<LI>Validate RSS format</li>
	<LI>Lather, Rinse, Repeat</li>
</oL>

So with the second round of TUITs, we work the Todo list ...

<H3>1. Scrape day pages to get titles</H3>
We need to replace main-page scrape of $3 in regular expression for description with a fetch of the &lt;title&gt;.
(<I>We could put in the name of the module, but that would be telling.</I>) The first attempt at this used LWP::Simple
and HTML::HeadParser while the main page parse was still in process ... which cancelled the main HTML parse, bad.
Apparently the differerent parsers share under the hood. So we switch to an agenda.</P>

<P>Let's add a little trace output so we know what it's doing ...</P>
<PRE>$ perl -I XML-RSS-SimpleGen-11.11: modXRS.pl
<span class="c">5/ 1..5 'YA Perl Advent Calendar 2005: Catchup'
6/ 6 'YA Perl Advent Calendar 2005: On the ordinate(6) day of X-Mas'
7/ 7 'YA Perl Advent Calendar 2005-12-07'
8/ 8 'YA Perl Advent Calendar 2005: On the 8E00000000 day of Advent my True Language brought to me...'
9/ 9 'YA Perl Advent Calendar 2005: Buzzword Bingo'
10/ 10 'YA Perl Advent Calendar 2005: Tarball Toolbelt'
11/ 11 'YA Perl Advent Calendar 2005: Conjunction Junction'
12/ 12 'YA Perl Advent Calendar 2005: re-run'
13/ 13 'YA Perl Advent Calendar 2005: A penny saved is a penny earned'
14/ 14 'YA Perl Advent Calendar 2005: Keeping it clean'
15/ 15 'YA Perl Advent Calendar 2005: SCALAR(0xdeadbeef)'
</span>
</PRE>
Note: It won't recreate a file if the results don't differ, so for testing
I'm rm-oving the file each time so I can see if it actually creates something.

<H3>2. What about this <B>rss_history_file?</B> thing</H3>
<B>SKIP:</B> Well, no, we don't want this, it would only show today's link...
we'll never have more than 25 items anyway.


<H3>3. Hook the (MIT) favicon as RSS image</H3>
<B>SKIP</B>: This seems easy, the MIT favicon is
<A HREF="http://web.mit.edu/favicon.ico"><IMG SRC="http://web.mit.edu/favicon.ico" ALIGN="BOTTOM" ALT="Icon" BORDER="0"></A>,
so to make that the icon of the RSS feed we add an <tt>rss_image</tt> line,
but a favicon isn't really intended for this. An RSS image porbably needs to be
larger for use in the tab of a feed-reader.

<H3>4. Make it appear in FireFox</H3>
In <TT>&lt;head&gt;</TT> section, put

<pre class="c">
&lt;link rel=&quot;alternate&quot; type=&quot;application/rss+xml&quot; title=&quot;RSS&quot; href=&quot;../yapac-rss.xml&quot;&gt;
</pre>

<H3>5. Test. </H3>
It works!  The same link-ing convention, but with <TT><B>./</B></TT>, would
work on the main page.

<H3>6. Validate RSS format</H3>
The web app validator that I tested this with, <A HREF="http://feedvalidator.org">http://feedvalidator.org</A>,
was recommended in the module POD. The webserver that I parked the RSS file on on for testing served a <B><TT>*.rss</TT></B>
file as text/plain, which gets a warning from feedvalidator, so I changed the generated file type to <B><TT>*-rss.xml</TT></B>.

<H3>7. Lather, Rinse, Repeat</H3>
To automate the update process you probably want to add this script to cron,
or otherwise integrate it into your publication procedure.</P>

<H1><A HREF="mod16.pl">mod16.pl</A></H1>
<HR />
<PRE>
   1 #!/usr/bin/env perl
   2 <span class="k">use</span> <span class="w">warnings</span><span class="sc">;</span>
   3 <span class="k">use</span> <span class="w">strict</span><span class="sc">;</span>
   4 <span class="k">use</span> <span class="w">Carp</span><span class="sc">;</span>
   5 
   6 <span class="k">sub </span><span class="m">utility::get_title</span><span class="sc">;</span>
   7 
   8 <span class="c"># A complete screen-scraper and RSS generator </span>
   9 <span class="c"># adapted from XML::RSS::SimpleGen POD</span>
  10 
  11 <span class="k">use</span> <span class="w">strict</span><span class="sc">;</span>
  12 <span class="k">use</span> <span class="w">XML::RSS::SimpleGen</span><span class="sc">;</span>
  13 <span class="k">my</span> <span class="i">$url</span> = <span class="q">q&lt;http://web.mit.edu/belg4mit/www/&gt;</span><span class="sc">;</span>
  14 
  15 <span class="i">rss_new</span><span class="s">(</span> <span class="i">$url</span><span class="cm">,</span> <span class="q">&quot;YAPAC&quot;</span><span class="cm">,</span> <span class="q">&quot;Yet Another Perl (Advent) Calendar&quot;</span> <span class="s">)</span><span class="sc">;</span>
  16 <span class="i">rss_language</span><span class="s">(</span> <span class="q">'en'</span> <span class="s">)</span><span class="sc">;</span>
  17 <span class="i">rss_webmaster</span><span class="s">(</span> <span class="q">'jpierce@cpan.org'</span> <span class="s">)</span><span class="sc">;</span>
  18 <span class="c"># image is not supposed to be a favicon, but a GIF, skip for now.</span>
  19 <span class="c"># rss_image(&quot;http://yourpath.com/icon.gif&quot;,32,32);</span>
  20 <span class="i">rss_daily</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>
  21 
  22 <span class="i">get_url</span><span class="s">(</span> <span class="i">$url</span> <span class="s">)</span><span class="sc">;</span>
  23 <span class="k">my</span> <span class="i">@pages</span><span class="sc">;</span>  <span class="c"># List of things to process</span>
  24 
  25 <span class="k">while</span><span class="s">(</span>
  26       <span class="c"># was</span>
  27       <span class="c">#  m{&lt;h4&gt;\s*&lt;a href='/(.*?)'.*?&gt;(.*?)&lt;/a&gt;\s*&lt;/h4&gt;\s*&lt;p.*?&gt;(.*?)&lt;a href='/}sg</span>
  28       <span class="c"># now must match</span>
  29       <span class="c"># &lt;br&gt;&lt;div&gt;&lt;a href=&quot;10/&quot; style=&quot;left: 375px; top: 255px;&quot;&gt;10&lt;/a&gt;&lt;/div&gt;</span>
  30       
  31       <span class="q">m{&lt;div&gt; \s* &lt;a \s href=&quot;(\d+/)&quot; [^&gt;]* &gt; ([^&lt;&gt;]*) &lt;/a&gt; \s* &lt;/div&gt; }xisg</span>
  32       
  33      <span class="s">)</span> <span class="s">{</span>
  34   
  35   <span class="k">my</span> <span class="s">(</span><span class="i">$page</span><span class="cm">,</span> <span class="i">$linkText</span><span class="cm">,</span> <span class="i">$title</span><span class="s">)</span>=<span class="s">(</span><span class="i">$1</span><span class="cm">,</span><span class="i">$2</span><span class="cm">,</span> <span class="k">undef</span><span class="s">)</span><span class="sc">;</span> <span class="c">#$3 is empty</span>
  36   
  37   <span class="c"># Defer with agenda</span>
  38   <span class="k">push</span> <span class="i">@pages</span><span class="cm">,</span> <span class="s">{</span><span class="w">page</span><span class="cm">=&gt;</span><span class="i">$page</span><span class="cm">,</span> <span class="w">link</span><span class="cm">=&gt;</span><span class="i">$linkText</span><span class="cm">,</span> <span class="w">title</span><span class="cm">=&gt;</span><span class="i">$title</span><span class="s">}</span><span class="sc">;</span>
  39 <span class="s">}</span>
  40 
  41 <span class="c"># now work the agenda, once we've finished the previous parse.</span>
  42 <span class="k">for</span> <span class="k">my</span> <span class="i">$pageRef</span> <span class="s">(</span><span class="i">@pages</span><span class="s">)</span> <span class="s">{</span>
  43   <span class="k">my</span> <span class="s">(</span><span class="i">$page</span><span class="cm">,</span> <span class="i">$link</span><span class="cm">,</span> <span class="i">$title</span><span class="s">)</span>=<span class="s">(</span><span class="i">@$pageRef</span>{<span class="q">qw{page link title}</span>}<span class="s">)</span><span class="sc">;</span>
  44   <span class="i">$title</span> ||= <span class="i">utility::get_title</span><span class="s">(</span><span class="i">$page</span><span class="s">)</span> || <span class="q">&quot;Advent Calendar Page - No Title&quot;</span><span class="sc">;</span>
  45   <span class="k">print</span> <span class="q">&quot;$page $link '$title' \n&quot;</span><span class="sc">;</span>
  46   <span class="i">rss_item</span><span class="s">(</span><span class="q">&quot;$url$page&quot;</span><span class="cm">,</span> <span class="i">$link</span><span class="cm">,</span> <span class="i">$title</span> <span class="s">)</span> <span class="sc">;</span>
  47 <span class="s">}</span>
  48 
  49 
  50 <span class="w">croak</span> <span class="q">&quot;No items in this content?! {{\n$_\n}}\nAborting&quot;</span>
  51   <span class="k">unless</span> <span class="i">rss_item_count</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>
  52   
  53 <span class="i">rss_save</span><span class="s">(</span> <span class="q">'yapac-rss.xml'</span><span class="cm">,</span> <span class="n">45</span> <span class="s">)</span><span class="sc">;</span>
  54 <span class="k">print</span> <span class="q">&quot;success\n&quot;</span><span class="sc">;</span>
  55 
  56 <span class="k">exit</span><span class="sc">;</span>
  57 
  58 <span class="c">### Reuse HTML::HeadParser from day 5</span>
<a name="package-utility-"></a>  59 <span class="k">package </span><span class="i">utility</span><span class="sc">;</span>
  60 <span class="k">use</span> <span class="w">LWP::Simple</span><span class="sc">;</span>
  61 <span class="k">use</span> <span class="w">HTML::HeadParser</span><span class="sc">;</span>
  62 <span class="k">use</span> <span class="w">Carp</span><span class="sc">;</span>
  63 
  64 <span class="c"># not safe for mod_perl ...</span>
  65 
<a name="get_title-"></a>  66 <span class="k">sub </span><span class="m">get_title</span> <span class="s">{</span>
  67   <span class="k">my</span> <span class="i">$header</span> = <span class="w">HTML::HeadParser</span><span class="w">-&gt;new</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>
  68   <span class="k">my</span> <span class="i">$date</span> = <span class="k">shift</span> || <span class="w">croak</span> <span class="q">&quot;get_title requires arg of page name&quot;</span><span class="sc">;</span>
  69   
  70   <span class="k">my</span> <span class="i">$content</span> = <span class="i">get</span><span class="s">(</span> <span class="i">$_</span> = <span class="q">&quot;http://web.mit.edu/belg4mit/www/$date&quot;</span><span class="s">)</span><span class="sc">;</span>
  71 
  72   <span class="k">unless</span><span class="s">(</span> <span class="i">$content</span> <span class="s">)</span> <span class="s">{</span>
  73     <span class="k">warn</span><span class="s">(</span><span class="q">&quot;No content for: $_\n&quot;</span><span class="s">)</span><span class="sc">;</span>
  74     <span class="k">return</span><span class="sc">;</span>
  75   <span class="s">}</span>
  76   
  77   <span class="i">$header</span><span class="i">-&gt;parse</span><span class="s">(</span><span class="i">$content</span><span class="s">)</span><span class="sc">;</span>
  78   <span class="k">return</span> <span class="i">$header</span><span class="i">-&gt;header</span><span class="s">(</span><span class="q">'Title'</span><span class="s">)</span><span class="sc">;</span>
  79 <span class="s">}</span>
</PRE>
</BODY>
</HTML>
